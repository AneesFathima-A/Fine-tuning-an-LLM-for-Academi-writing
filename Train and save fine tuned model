# TRAIN DATA WITH TINYLLAMA MODEL

!pip install transformers accelerate peft bitsandbytes datasets gradio google-generativeai --quiet

import os
import torch
import pandas as pd
from datasets import Dataset
from transformers import (
    AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig,
    TrainingArguments, Trainer, DataCollatorForLanguageModeling
)
from peft import prepare_model_for_kbit_training, LoraConfig, get_peft_model
import gradio as gr
import google.generativeai as genai

# Load and format dataset
df = pd.read_csv('summaries_train.csv')
df.dropna()
df.head()

def format_prompt(row):
    return {"text": f"### Title:\n{row['title']}\n\n### Summary:\n{row['summary']}"}

formatted_data = df.apply(format_prompt, axis=1, result_type="expand")
dataset = Dataset.from_pandas(formatted_data)

# Load model and tokenizer
model_name = "TinyLlama/TinyLlama-1.1B-Chat-v1.0"
tokenizer = AutoTokenizer.from_pretrained(model_name)
tokenizer.pad_token = tokenizer.eos_token

quant_config = BitsAndBytesConfig(load_in_8bit=True, llm_int8_threshold=6.0)
base_model = AutoModelForCausalLM.from_pretrained(
    model_name, device_map="auto", quantization_config=quant_config
)
base_model = prepare_model_for_kbit_training(base_model)

lora_config = LoraConfig(
    r=8, lora_alpha=16,
    target_modules=["q_proj", "v_proj"],
    lora_dropout=0.05,
    bias="none", task_type="CAUSAL_LM"
)

model = get_peft_model(base_model, lora_config)

# Tokenize
def tokenize(batch):
    return tokenizer(batch["text"], padding="max_length", truncation=True, max_length=256)

tokenized_dataset = dataset.map(tokenize, batched=True)

# Set up training
output_dir = "/content/drive/MyDrive/tinyllama-summary"
training_args = TrainingArguments(
    output_dir=output_dir,
    per_device_train_batch_size=2,
    gradient_accumulation_steps=4,
    num_train_epochs=1,  
    learning_rate=2e-4,
    fp16=True,
    logging_steps=50,
    save_steps=100,
    save_total_limit=1,
    report_to="none",
    resume_from_checkpoint=False 
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_dataset,
    tokenizer=tokenizer,
    data_collator=DataCollatorForLanguageModeling(tokenizer, mlm=False)
)

trainer.train()

# Save final model
model.save_pretrained(output_dir)
tokenizer.save_pretrained(output_dir)
